#!/usr/bin/env bash

set -e # exit immediately if a simple command exits with a non-zero status.
set -u # report the usage of uninitialized variables.

source "$(dirname "$(readlink -f "$0")")/setenv"

cd "${MONGODB_SSL}" || exit 666

# generate only if client and server keys doesnt already exists
if [ ! -f "${MONGODB_SSL}/mongodb.pem" ]; then
    # We need to reset LD Library path to use system deployed openssl version
    LD_LIBRARY_PATH=""

    # retrieving openssl.cnf - location is OS ependent
    OPENSSL_CNF=$(find /etc -name openssl.cnf)

    # generate private key
    openssl genrsa -out "${MONGODB_SSL}/mongodb.key" 2048
    
    SAN_SECTION="[SAN]\nsubjectAltName=DNS.1:<%= spec.ip %>,DNS.2:127.0.0.1\nextendedKeyUsage=serverAuth,clientAuth\n"

    # generate certification request
    openssl req -new -key "${MONGODB_SSL}/mongodb.key" \
        -out "${MONGODB_SSL}/mongodb.csr" \
        -reqexts SAN \
        -config <(cat "${OPENSSL_CNF}" <(printf "${SAN_SECTION}")) \
        -subj "/C=FR/ST=Paris/L=Paris/O=Orange/OU=CloudFoundry/CN=<%= spec.ip %>"

    # sign certificate
    openssl x509 -req -in "${MONGODB_SSL}/mongodb.csr" \
        -extensions SAN \
        -extfile <(printf "${SAN_SECTION}") \
        -CA "${MONGODB_SSL}/CA.crt" \
        -CAkey "${MONGODB_SSL}/CA.key" \
        -CAcreateserial -out "${MONGODB_SSL}/mongodb.crt" \
        -days 3650 -sha256

    cat "${MONGODB_SSL}/mongodb.key" \
        "${MONGODB_SSL}/mongodb.crt" \
        > "${MONGODB_SSL}/mongodb.pem"
fi
